# Migrate database schema
---
- name: create noc user
  import_role:
    name: postgres
    tasks_from: users
  vars:
    db_name: "{{postgres_noc_db}}"
    db_password: "{{postgres_noc_password}}"
    db_user: "{{postgres_noc_user}}"
  delegate_to: "{{postgres_master_node}}"
  tags:
    - postgres

- import_tasks: configure_consul.yml

- name: download collections
  command: "{{ noc_root }}/scripts/deploy/install-packages requirements/collections.json"
  args:
    chdir: "{{ noc_root }}"
  register: s
  changed_when: "'CHANGED' in s.stdout"
  environment:
    http_proxy: "{{http_proxy}}"
    https_proxy: "{{http_proxy}}"
    NOC_CONFIG: "{{config_order}}"
  tags:
    - requirements
    - coll_sync

- name: Migrate db
  command: ./noc migrate
  args:
    chdir: "{{ noc_root }}"
  become_user: "{{ noc_user }}"
  become: "True"
  register: migrate_out
  changed_when: "'Nothing to migrate' not in migrate_out.stdout"

- name: Ensure Mongo indecies
  command: ./noc ensure-indexes
  args:
    chdir: "{{ noc_root }}"
  become: "True"
  become_user: "{{ noc_user }}"
  changed_when: "False"

- name: Apply pools
  command: "{{ noc_root }}/scripts/deploy/apply-pools"
  args:
    chdir: "{{ noc_root }}"
  become_user: "{{ noc_user }}"
  become: "True"
  register: result
  changed_when: "'CHANGED' in result.stdout"

- name: test if collections dir is empty
  stat:
    path: "{{ noc_root }}/collections/sa.profilecheckrules"
  register: coll_exists
  tags:
    - coll_sync

- name: fail if collections not found
  fail:
    msg: "Please run install_everything deploy and ensure dir {{ noc_root }}/collections/ is not empty"
  when: not coll_exists.stat.exists
  tags:
    - coll_sync

- name: Synchronize collections
  command: ./noc collection sync
  args:
    chdir: "{{ noc_root }}"
  become_user: "{{ noc_user }}"
  become: "True"
  when: coll_exists.stat.exists
  tags:
    - coll_sync

- name: Synchronize permissions
  command: ./noc sync-perm
  args:
    chdir: "{{ noc_root }}"
  become_user: "{{ noc_user }}"
  become: "True"
  tags:
    - perms
    - skip_ansible_lint

- name: Synchronize MIBs
  command: ./noc sync-mibs
  args:
    chdir: "{{ noc_root }}"
  become_user: "{{ noc_user }}"
  become: "True"
  register: mibs_out
  changed_when: mibs_out.stdout | length > 7

- name: migrate ch db
  command: ./noc migrate-ch --host "{{item}}"
  args:
    chdir: "{{ noc_root }}"
  register: migrate_ch
  with_items: "{{groups['svc-clickhouse-exec']}}"
  delegate_to: "{{groups['svc-chwriter-exec'][0]}}"
  changed_when: "'CHANGED' in migrate_ch.stdout"
  when:
    - "'svc-chwriter-exec' in groups"
