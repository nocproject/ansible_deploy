---
- name: gather py3 facts
  vars:
    ansible_python_interpreter: /usr/bin/python3
  setup:
    gather_subset:
      - 'min'

- name: Check if we have NOC/bin/ folder with py3
  register: noc_bin_py3
  stat:
    path: "{{ noc_root }}/bin/python3"

- name: Archive old py2 noc folder and delete files in /var/lib
  block:
    - name: archive current noc dir
      archive:
        path: "{{noc_root}}"
        dest: "{{noc_root}}/../noc_on_python2.tbz"
        format: bz2

    - name: check if we have custom settings.yml
      stat:
        path: "{{ noc_root }}/etc/settings.yml"
      register: stat_result

    - name: Copy settings.yml to /tmp
      copy:
        src: "{{ noc_root }}/etc/settings.yml"
        dest: /tmp
        remote_src: true
        force: true
      when: stat_result.stat.exists

    - name: Delete old folders
      file:
        state: absent
        path: "{{ item }}"
      with_items:
        - "{{ noc_root }}"
        - /var/lib/noc/var/pkg
      when: noc_root not in ansible_mounts|json_query('[].mount')

    - name:  Handle if /opt/noc/ is mountpoint
      block:
        - name: Create temporary empty folder
          tempfile:
            state: directory
            suffix: tempansible
          register: tempfile_1
          delegate_to: "{{ inventory_hostname }}"

        - name: Empty noc_root directory
          synchronize:
            src: "{{ tempfile_1.path }}/"
            dest: "{{ item }}"
            delete: true
            recursive: true
            perms: true
            owner: true
          delegate_to: "{{ inventory_hostname }}"
          with_items:
            - /var/lib/noc/var/pkg
            - "{{ noc_root }}/"

      when: noc_root in ansible_mounts|json_query('[].mount')

    - name: Reinitialize git
      include_tasks: "git.yml"

    - name: Recreate noc dirs
      include_tasks: "dirs.yml"

    - name: Copy settings.yml back
      copy:
        src: /tmp/settings.yml
        dest: "{{ noc_root }}/etc/settings.yml"
        remote_src: true
      when: stat_result.stat.exists

  when:
    - noc_bin_py3 is defined
    - not noc_bin_py3.stat.exists

- name: Initialize virtualenv3
  pip:
    chdir: "{{ noc_root }}"
    name: "pip"
    virtualenv: "{{ noc_root }}"
    virtualenv_command: /usr/bin/python3 -m venv
    state: "latest"
  environment:
    https_proxy: "{{ http_proxy }}"
    http_proxy: "{{ http_proxy }}"
    LC_ALL: C

- name: Install wheel
  pip:
    name: wheel
    chdir: "{{ noc_root }}"
    virtualenv: "{{ noc_root }}"
    state: present
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Upgrade setuptools
  pip:
    name: setuptools
    chdir: "{{ noc_root }}"
    virtualenv: "{{ noc_root }}"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Relink site-packages
  command: "{{ noc_root }}/scripts/deploy/link-site-packages"
  args:
    chdir: "{{ noc_root }}"
  register: s
  changed_when: "'CHANGED' in s.stdout"

- name: Install node python packages(should take a while for a first time)
  pip:
    chdir: "{{ noc_root }}"
    requirements: "requirements/node.txt"
    virtualenv: "{{ noc_root }}"
    extra_args: "--trusted-host cdn.getnoc.com --find-links https://cdn.getnoc.com/npkg/simple/ --upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
    PATH: "{{ ansible_env.PATH }}:/usr/pgsql-{{ postgres_version }}/bin/"
    CFLAGS: "{{ pip_cflags | default('') }}"
    LDFLAGS: "{{ pip_ldflags | default('') }}"
  tags:
    - requirements

- name: Install noc.pth
  template:
    src: "lib/python/site-packages/noc.pth.j2"
    dest: "{{ noc_root }}/lib/python{{ ansible_python.version.major }}.{{ ansible_python.version.minor }}/site-packages/noc.pth"
