[main]
debug = false
# Comma-separated list of emails to send error reports
admin_emails =
# Local time zone for this installation. Choices can be found here:
# http://www.postgresql.org/docs/8.1/static/datetime-keywords.html#DATETIME-TIMEZONE-SET-TABLE
# although not all variations may be possible on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
timezone = Europe/Moscow
#
# Date Format:
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
#
date_format = d.m.Y
#
# Time format.
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
time_format = H:i:s
# Month/Day format
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
month_day_format = F j
# Month/Year format
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
year_month_format = F Y
#
# DateTime format:
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
#
datetime_format = d.m.Y H:i:s
# Language code for this installation. All choices can be found here:
# http://www.w3.org/TR/REC-html40/struct/dirlang.html#langcodes
# http://blogs.law.harvard.edu/tech/stories/storyReader$15
language_code = en-us
# Make this unique, and don't share it with anybody.
secret_key = j82icp#5zBUZ!4hx^#0s4)dy8sru@1ynqblq2!1lv1lu=7&(58
# From: for server-generated emails
server_email = root@localhost
# Socket factory polling method.
# Possible selections are:
# * optimal - auto-detect best supported method
# * select - use select()
# * poll   - use poll()
# * kevent - use kevent/kqueue
polling_method = select
# Comma-separated list of additionally installed applications
installed_apps =
# Maximum crashinfo size (in bytes)
crashinfo_limit = 1000000

[database]
# postgresql_psycopg2
engine   = postgresql_psycopg2
# Database name
name     = noc
# Database user
user     = noc
# User password
password = noc
# Set to empty string for localhost
host     =
# Set to empty string for default
port     =

[nosql_database]
# MongoDB database name
name = noc
# MongoDB database user
user = noc
# MongoDB database password
password = noc
#
host =
#
port =

#
# NOC User Authentication
#
[authentication]
#
# Authentication method. Must be one of:
# local - use NOC's database to authenticate users
# ldap - use LDAP server to authenticate users (python-ldap library required)
# ad - use MS Active Directory (python-ldap library required)
# http - use HTTP's REMOTE_USER for authentication
# pyrule - use custom pyRule for authentication

method = local
#
# pyRule, returning login form class.
# Empty to use default auth_form_user_password
#
form_pyrule = 

# LDAP server URI (Applicable only for "ldap" method)
# If your LDAP server supports partitions (i.e Apache DS),
# specify suffix in the URI: ldap://ldap.exaple.com/suffix
ldap_server = ldap://ldap.example.com/
# LDAP bind method:
#     simple - authenticate user against userPassword
ldap_bind_method = simple
# technical DN to lookup user and group information
# leave empty for anonymous bind
ldap_bind_dn =
# Password for technical DN
ldap_bind_password = 
# Users search base
ldap_users_base = ou=Users,ou=nocproject,ou=org
# Filter to search users by username
ldap_users_filter = (&(objectClass=inetOrgPerson)(uid={{user}}))
# Groups search base
ldap_groups_base = ou=Groups,ou=nocproject,ou=org
# Additionaly check user in group, before permitting to log in
# Set user.is_active flag to false when user is not in a group
ldap_required_group = 
# Filter to search user in required group
ldap_required_filter = (|(uniqueMember={{dn}})(member={{user}}))
# Grant superuser permissions if user in group
ldap_superuser_group =
# Filter to search user in superusers group
ldap_superuser_filter = (|(uniqueMember={{dn}})(member={{user}}))

# AD server URI (Applicable only for "ad" method)
ad_server = ldap://ad.example.com/
# AD bind method:
#     simple - authenticate user against userPassword
ad_bind_method = simple
# technical DN to lookup user and group information
# leave empty for anonymous bind
ad_bind_dn =
# Password for technical DN
ad_bind_password = 
# Users search base
ad_users_base = ou=nocproject,ou=org
# Filter to search users by username
ad_users_filter = (&(objectClass=organizationalPerson)(sAMAccountName={{user}}))
# Groups search base
ad_groups_base = ou=Groups,ou=nocproject,ou=org
# Additionaly check user in group, before permitting to log in
# Set user.is_active flag to false when user is not in a group
ad_required_group = 
# Filter to search user in required group
ad_required_filter = noc_users
# Grant superuser permissions if user in group
ad_superuser_group = noc_superusers
# Filter to search user in superusers group
ad_superuser_filter =

# Authentication pyrule (for pyrule method)
pyrule_authentication =

#
# Site customization
#
[customization]
# Installation name. Displayed in top left corner of web interface
installation_name = Unconfigured Installation
# Logo url. Absolute or relative path
logo_url = /static/img/logo_24x24_black.png
# Logo width
logo_width = 24
# Logo height
logo_height = 24
# favicon url
favicon_url = /static/img/logo_24x24_deep_azure.png

#
# UI themes
#
[themes]
blue.name = Blue
blue.css = /static/resources/css/ext-all.css
blue.enabled = true

gray.name = Gray
gray.css = /static/resources/css/ext-all-gray.css
gray.enabled = true

access.name = Access
access.css = /static/resources/css/ext-all-access.css
access.enabled = true

scoped.name = Scoped
scoped.css = /static/resources/css/ext-all-scoped.css
scoped.enabled = true

#
# cm module setup
#
[cm]
# Path to the root of the repos
repo     = /var/repo
# VCS Type: hg, CVS
vcs_type = hg
# Path to VCS CLI utility
vcs_path = /usr/local/bin/hg
# Next check on activator overload
timeout_overload = 150
# Next check on down host
timeout_down     = 60
# Next check after config fetching error
timeout_error    = 300
# Random variation to timeout.
# If timeout is T and variation is N means
# the final timeout will be random value in range of [T-T/N,T+T/N]
timeout_variation = 10

#
# Peer module setup
#
[peer]
# RPSL pref semantics
#   off -> pref == localpref
#   on  -> pref == 65535 - localpref
rpsl_inverse_pref_style = off
#
# Enable prefix list optimization
#
prefix_list_optimization = on
#
# Prefix list optimization threshold.
# Do not optimize prefix lists shorter than threshold
#
prefix_list_optimization_threshold = 0
#
# Maximal prefix length for generated prefix lists
#
max_prefix_length = 32
#
# Update whois cache from RIPE database
#
use_ripe = on
#
# Update whois cache from ARIN database
#
use_arin = on

#
# DNS Module setup
#
[dns]
# Start to issue expiration warnings from warn_before_expired_days before deadline
warn_before_expired_days = 30
#
# Trouble Ticketing System integration
#
[tt]
# Link to TT. %(tt)s expanded into ticket number
url = http://example.com/ticket=%(tt)s

#
# Other paths
#
[path]
# Directory to store database and repo backups
backup_dir = /var/backup
# Paths to utilities
ssh        = /usr/bin/ssh
rsync      = /usr/bin/rsync
pg_dump    = /usr/local/bin/pg_dump
tar        = /usr/bin/tar
gzip       = /usr/bin/gzip
smidump    = /usr/bin/smidump
smilint    = /usr/bin/smilint
dig        = /usr/bin/dig
gpg        = /usr/bin/gpg
mongodump  = /usr/bin/mongodump
#
# Backup parameters
#
[backup]
keep_days          = 14
keep_weeks         = 12
keep_day_of_week   = 6
keep_months        = 12
keep_day_of_month  = 1
#
# PGP Settings
#
[pgp]
use_key   = user@example.com
keyserver = keys.gnupg.net
#
# FM Settings
#
[fm]
# Time to store active event in the noc.event.active collection
# before moving to archive
active_window = 86400
