# nginx role
---
- include_tasks: "os/{{ ansible_distribution }}/main.yml"
  tags:
    - requirements

- name: include certs
  import_tasks: certs.yml
  tags:
    - config

- name: Check if old django directory exists
  stat:
    path: "{{ noc_root }}/django/contrib/admin/static/admin/css"
  register: old_dj_path

- name: fix old django path
  import_tasks: path.yml
  when: old_dj_path.stat.exists and old_dj_path.stat.isdir
  tags:
    - config

- name: Setup nginx
  template:
    src: "{{ item.name }}"
    dest: "{{ item.path }}"
    owner: "{{ nginx_user }}"
    force: "{{ item.force }}"
  notify: reload nginx
  with_items:
    - name: noc.conf.j2
      path: "{{ nginx_conf_path }}"
      force: "True"
    - name: noc_ssl.conf.j2
      path: "{{ nginx_ssl_settings }}"
      force: "True"
  tags:
    - config

- name: Setup datastream_whitelist_access
  template:
    src: allow_ip_datastream.conf.j2
    dest: "{{ etc_prefix }}/nginx/allow_ip_datastream.conf"
    owner: "{{ nginx_user }}"
  notify: reload nginx
  when:
    - "'svc-datastream-exec' in groups"
    - "groups['svc-datastream-exec'] | length > 0"
  tags:
    - config

- name: Setup nbi_whitelist_access
  template:
    src: allow_ip_nbi.conf.j2
    dest: "{{ etc_prefix }}/nginx/allow_ip_nbi.conf"
    owner: "{{ nginx_user }}"
  notify: reload nginx
  when:
    - nbi_whitelist_access is defined
  tags:
    - config

- name: place nginx ct template
  import_role:
    name: consul-template
    tasks_from: service
  vars:
    ct_service_name: nginx
    ct_service_source: "upstream.conf.ctmpl"
    ct_service_dest: "{{ nginx_conf_upstream_path }}"
    ct_service_command: "{{ reload_command }}"
    ct_service_command_timeout: "60s"
    ct_service_source_template: "False"

- name: place consul check
  import_role:
    name: consul
    tasks_from: service
  vars:
    consul_service_name: nginx
    consul_service_tags: ""
    consul_service_port: 443
    consul_service_check_type: "http"
    consul_service_check_value: "https://{{ noc_web_host }}/ng_stats"
    consul_service_check_interval: "10s"
    consul_service_check_http_skip_verify: "{{ nginx_self_signed_cerificate }}"

- name: Install nginx monitoring
  include_role:
    name: monitoring
    tasks_from: monitor
  vars:
    monitoring_service_name: nginx
    monitoring_service_tags: ""
    monitoring_service_port: 443
    monitoring_service_address: "{{ ansible_host }}"
    monitoring_service_check_interval: "10s"
    monitoring_service_procstat_check: "True"
    monitoring_service_procstat_type: pid_file
    monitoring_service_procstat_value: "/var/run/nginx.pid"
    monitoring_config:
      urls: ["https://{{ noc_web_host }}/ng_stats"]
      insecure_skip_verify: "{{ nginx_self_signed_cerificate | ternary('true','false') }}"
  when: has_svc_monitoring is defined
  tags:
    - monitoring

- name: Enable Nginx system service
  service:
    name: "{{ nginx_system_service }}"
    enabled: "True"
  notify: reload nginx

#- name: Install nginx monitoring
#  template:
#    src: "etc/telegraf/telegraf.d/nginx.conf.j2"
#    dest: "{{ telegraf_confd_path }}/nginx.conf"
#  notify: reload telegraf
#  when:
#    - "'svc-telegraf' in groups"
#    - "inventory_hostname in groups['svc-telegraf-exec']"
#  tags:
#    - config
#    - telegraf
#
#- name: Install service monitoring
#  template:
#    src: "{{ item }}"
#    dest: "{{ telegraf_confd_path }}/{{ item[25:] }}"
#    force: no
#  with_items:
#    - "etc/telegraf/telegraf.d/discovery.conf.j2"
#    - "etc/telegraf/telegraf.d/fm-monitor.conf.j2"
#  notify: reload telegraf
#  when:
#    - "'svc-telegraf' in groups"
#    - "inventory_hostname in groups['svc-telegraf-exec']"
#  tags:
#    - config
