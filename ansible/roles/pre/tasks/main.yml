# Pre-deployment tasks
---
- name: "Loading system-dependend settings"
  include_vars: "os/{{ ansible_distribution }}.yml"
  tags:
    - config
    - always

- name: Set tower_ip
  set_fact:
    tower_ip: "{{hostvars[inventory_hostname]['ansible_env']['SSH_CLIENT'].split(' ')[0]}}"
  when: "'smart' or 'ssh' in ansible_connection"
  tags:
    - always


- name: "Load variables from consul"
  include_vars: "consul.yml"
  when: consul_env
  environment:
    CONSUL_URL: "{{consul_url}}"
    CONSUL_TOKEN: "{{consul_token}}"
  tags:
    - config
    - always

- name: "Load variables from tower"
  include_vars: "tower.yml"
  when: not consul_env
  tags:
    - always

- name: set proxy
  set_fact:
    http_proxy: "{{ proxy }}"
  when: "proxy is defined"
  tags:
    - config
    - always

- name: Elect postgres master
  set_fact:
    postgres_master: "{{keepalived_patroni_virtual_ip}}"
    postgres_listen: "{{haproxy_patroni_listen}}"
  when: groups['svc-haproxy'] | count > 1


- name: Display all variables/facts known for a host
  debug:
    var: hostvars[inventory_hostname]
    verbosity: 8
  tags:
    - always

- name: Various env checks
  include: "checks.yml"
  run_once: true
  tags:
    - always
    - env_checks

- name: notify alerta of deployment start
  uri:
    url: "{{alerta_url}}/api/alert?api-key={{alerta_token}}"
    method: POST
    body:
      resource: "tower {{noc_env}}"
      event: Deploy
      environment: Production
      type: AnsibleDeploy
      attributes:
        env_name: "{{noc_env}}"
      service:
        - NOC
      status: open
      severity: informational
      text: "Deployment on {{noc_env}} started with tags: {{ ansible_tags }}"
    body_format: json
    status_code: 201
    validate_certs: no
  when: "alerta_url and alerta_url is defined and alerta_token is defined and 'prod' in noc_env_type"
  register: alerta_notified
  changed_when: "alerta_notified.status == 201"
  run_once: true
  environment:
    https_proxy: "{{http_proxy}}"
  tags:
    - always

- name: "Include OS-specific tasks"
  include: "os/{{ ansible_distribution }}/main.yml"
  become: true
  tags:
    - config
    - always

- name: Stop NOC node
  service:
    name: "{{ noc_system_service }}"
    state: stopped
  become: yes
  failed_when: False
  changed_when: False
  tags:
    - restart

- name: Setup hostname
  hostname: name="{{ inventory_hostname }}"
  when: "'Linux' in ansible_system"
  become: true
  register: hname
  tags:
    - config

- debug:
    msg: "Please setup cluster wide /etc/hosts via /opt/tower/var/tower/data/{{noc_env}}/hosts on Tower server"
  run_once: true


- name: Setup default /etc/hosts
  local_action:
    module: template
    src: "hosts.j2"
    dest: "/opt/tower/var/tower/data/{{noc_env}}/hosts"
    force: no
  become: true
  run_once: true
  tags:
    - config
    - fill_hosts

- name: Setup /etc/hosts
  lineinfile:
    dest: "/opt/tower/var/tower/data/{{noc_env}}/hosts"
    line: "{{ hostvars[item].ansible_host }} {{ item }}"
    regexp: ".*{{ item }}$"
    create: no
  become: true
  with_items: "{% if 'nodes' in groups %}{{groups['nodes']}}{%endif%}"
  delegate_to: 127.0.0.1
  when: "'nodes' in groups"
  register: hostsc
  run_once: true
  tags:
    - config
    - fill_hosts

- name: unsure consul ip is in hosts file
  lineinfile:
    dest: "/opt/tower/var/tower/data/{{noc_env}}/hosts"
    line: "127.0.0.1 consul"
    regexp: "127.0.0.1 consul"
    create: no
  become: true
  with_items: "{% if 'nodes' in groups %}{{groups['nodes']}}{%endif%}"
  delegate_to: 127.0.0.1
  when: "'nodes' in groups"
  register: hostsc
  run_once: true
  tags:
    - config
    - fill_hosts

- name: copy hosts file to nodes
  copy:
    src: "/opt/tower/var/tower/data/{{noc_env}}/hosts"
    dest: /etc/hosts
  when: "'nodes' in groups"
  become: true
  tags:
    - config
    - fill_hosts