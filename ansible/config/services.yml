# NOC services description
---
product: "noc"
config:
  activator:
    script_threads:
      default: 20
      label: "Script threads"
      type: int
    tos:
      default: 0
      label: "IP ToS mark"
      type: int
  zz_alerta:
    url:
      label: "Url"
      description: "Alerta api url"
      type: str
    token:
      label: "Token"
      description: "Api token with write access"
      type: str
  bi:
    language:
      default: en
      label: "Translation language"
      type: str
      description: "en-us, ru, pt_BR"
    query_threads:
      default: 10
      label: "Concurrent query limit per process"
      type: int
  card:
    language:
      default: en
      label: "Translation language"
      type: str
      description: "en-us, ru, pt_BR"
    weight:
      default: 5
      label: "Http nginx Weight"
      type: int
  chwriter:
    batch_delay_ms:
      default: 1000
      label: "Delay batch write up to ms"
      type: int
    batch_size:
      default: 50000
      label: "Write batch size (rows)"
      type: int
    channel_expire_interval:
      default: 300
      label: "Channel expiration interval (s)"
      type: int
    records_buffer:
      default: 1000000
      label: "Records buffer size (in records)"
      type: int
  classifier:
    default_interface_profile:
      default: default
      label: "Default interface profile"
      type: str
    lookup_solution:
      default: "noc.services.classifier.rulelookup.RuleLookup"
      label: "Lookup solution"
      type: str
  clickhouse:
    user:
      default: noc
      label: "RW user"
      type: str
      description: "RW user"
    password:
      default: noc
      label: "Password for user default"
      type: str
      description: "RW user password"
    ro_password:
      default: noc
      label: "Password for user readonly"
      description: "RO user password"
      default: noc
      type: str
    db:
      default: noc
      label: "db name"
      type: str
    query_size:
      default: 262144
      label: "Max query size"
      type: int
  consul:
    replication_token:
      label: "consul replication token"
      type: str
    token:
      description: "<strong> <a href=https://www.consul.io/docs/guides/acl.html target=_blank> https://www.consul.io/docs/guides/acl.html </a> </strong>"
      label: "consul token"
      type: str
  correlator:
    max_threads:
      default: 10
      label: "Correlator threads"
      type: int
  discovery:
    max_threads:
      default: 10
      label: "Discovery threads"
      type: int
  escalator:
    max_threads:
      default: 10
      label: "Escalator threads"
      type: int
  grafana:
    password:
      default: grafana
      description: "<strong> <a href=http://docs.grafana.org/ target=_blank> http://docs.grafana.org/ </a> </strong>"
      label: "Grafana postgres password"
      type: str
  grafanads:
    db_threads:
      default: 10
      label: "Concurrent query limit per process"
      type: int
  influxdb:
    influxdb_data_directory:
      default: "/var/lib/influxdb/data/"
      label: "InfluxDB Data directory"
      type: str
    influxdb_meta_directory:
      default: "/var/lib/influxdb/meta/"
      label: "InfluxDB Meta directory"
      type: str
    influxdb_wal_directory:
      default: "/var/lib/influxdb/wal/"
      label: "InfluxDB Wal directory"
      type: str
    max_cache_memory:
      default: 1048576000
      description: "<strong> <a href=https://docs.influxdata.com/influxdb/v1.2/concepts/storage_engine/ target=_blank> https://docs.influxdata.com/influxdb/v1.2/concepts/storage_engine/ </a> </strong>"
      label: "Max cache memory"
      type: int
    snapshot_memory_size:
      default: 26214400
      description: "<strong> <a href=https://docs.influxdata.com/influxdb/v1.2/concepts/storage_engine/ target=_blank> https://docs.influxdata.com/influxdb/v1.2/concepts/storage_engine/ </a> </strong>"
      label: "Mem size for snapshot"
      type: int
  haproxy:
    stats:
      default: false
      description: "on port 1936"
      label: "haproxy's stats interface"
      type: bool
    user:
      label: "Stats interface user"
      type: str
      default: admin
    password:
      label: "Stats interface password"
      description: "a-z,A-Z,0-9,_-"
      type: str
      default: noc
  keepalived:
    nginx_virtual_ip:
      description: "<strong> <a href=http://keepalived.readthedocs.io/en/latest/ target=_blank> http://www.keepalived.org/documentation.html </a> </strong>"
      label: "Nginx virtual IP"
      type: str
    password:
      default: noc
      label: "Keepalived password. max 8 chars"
      type: str
    patroni_virtual_ip:
      label: "Patroni virtual IP"
      type: str
    clickhouse_virtual_ip:
      label: "Clickhouse virtual IP"
      type: str
  login:
    language:
      default: en
      label: "Translation language"
      type: str
      description: "en-us, ru, pt_BR"
    methods:
      default: local
      label: "Authentication methods"
      type: str
      description: "local, ldap. can be multiple"
    pam_service:
      default: noc
      label: "PAM Service"
      type: str
    radius_secret:
      label: "RADIUS Secret"
      type: str
    radius_server:
      label: "RADIUS Server"
      type: str
    session_ttl:
      default: 7
      label: "Session TTL (days)"
      type: int
    weight:
      default: 5
      label: "Http nginx Weight"
      type: int
  mailsender:
    from_address:
      default: "noc@example.com"
      label: "Email sender address"
      type: str
    helo_hostname:
      default: noc
      label: "SMTP HELO hostname"
      type: str
    smtp_password:
      label: "SMTP Password"
      type: str
    smtp_port:
      default: 25
      label: "SMTP server port"
      type: int
    smtp_server:
      label: "SMTP server address"
      type: str
    smtp_user:
      label: "SMTP User"
      type: str
    use_tls:
      default: false
      label: "Use SMTP TLS"
      type: bool
  memcached:
    max_clients:
      default: 1024
      label: "memcached max clients"
      type: int
    max_memory:
      default: 64
      description: "<strong> <a href=https://github.com/memcached/memcached/wiki target=_blank> https://github.com/memcached/memcached/wiki </a> </strong>"
      label: "memcached max memory"
      type: int
  mongod:
    mongod_logging_destination:
      default: "file"
      label: "Mongo logging driver"
      description: "Valid options are: syslog, file. <strong>Use syslog if you can</strong>. File option is for backward compatibility only."
      type: str

  mrt:
    max_concurrency:
      default: 50
      label: "Amount of concurrent tasks"
      type: int
  nginx:
    http_redirect:
      default: true
      description: "<strong> <a href=https://nginx.org/en/docs/ target=_blank> https://nginx.org/en/docs/</a> </strong>"
      label: "Redirect http to https"
      type: bool
    logging:
      default: false
      label: "Use JSON logging"
      type: bool
  noc:
    config:
      type: text
      label: "Settings"
      description: "<strong> <a href=https://kb.nocproject.org/x/8oKYAQ target=_blank> Doc in russian</a> </strong>"
  nsqd:
    max_messages_in_memory:
      default: 10000
      description: "<strong> <a href=http://nsq.io/components/nsqd.html target=_blank> http://nsq.io/components/nsqd.html </a> </strong>"
      label: "Keep max messages in memory"
      type: int
  patroni:
    rest_password:
      description: "<strong> <a href=https://github.com/zalando/patroni/blob/master/docs/SETTINGS.rst target=_blank> https://github.com/zalando/patroni/blob/master/docs/SETTINGS.rst </a> </strong>"
      label: "Patroni REST password"
      type: str
  pgbouncer:
    pgbouncer_max_clients:
      default: 3000
      description: "<strong> <a href=https://pgbouncer.github.io target=_blank> https://pgbouncer.github.io </a> </strong>"
      label: "Pgbouncer max clients"
      type: int
    pgbouncer_max_db_connections:
      default: 10
      description: "<strong> <a href=https://pgbouncer.github.io target=_blank> https://pgbouncer.github.io </a> </strong>"
      label: "Pgbouncer connections to postgres"
      type: int
  ping:
    restore_threshold:
      default: 0
      label: "Amount of down objects (in percents) to leave throttling mode"
      type: int
    throttle_threshold:
      default: 0
      label: "Amount of down objects (in percents) to enter throttling mode"
      type: int
    tos:
      default: 0
      label: "IP ToS mark"
      type: int
  pmwriter:
    batch_size:
      default: 2500
      label: "Write batch size (metrics)"
      type: int
    metrics_buffer:
      default: 50000
      label: "Metrics buffer size (metrics)"
      type: int
  postgres:
    max_clients:
      default: 300
      label: "Postgresql max clients"
      type: int
    postgres_version:
      default: 9.4
      description: "<strong>There will be no automatic migration beetween versions.</strong> Valid versions are 9.4, 9.6. Use <a href=https://www.postgresql.org/docs/9.6/static/upgrading.html target=_blank> docs </a> before changing that field."
      label: "Postgresql version"
      type: str
    replicator_password:
      default: noc
      description: "Password for user \"replicator\""
      label: "Postgresql replicator password"
      type: str
    superuser_password:
      default: noc
      description: "Password for user \"superuser\""
      label: "Postgresql superuser password"
      type: str
  sae:
    db_threads:
      default: 4
      label: "DB threads"
      type: int
  scheduler:
    max_threads:
      default: 10
      label: "Scheduler threads"
      type: int
  syslogcollector:
    listen_syslog:
      default: "0.0.0.0:514"
      label: "Listen SYSLOG"
      type: str
  tgsender:
    proxy_addres:
      label: "Proxy Addres (https://ip:port) If use auth (https://us:pass@ip:port)"
      type: str
    token:
      label: Token
      type: str
    use_proxy:
      default: false
      label: "Use Proxy"
      type: bool
  trapcollector:
    listen_traps:
      default: "0.0.0.0:162"
      label: "Listen SNNP Traps"
      type: str
  web:
    language:
      default: en
      label: "Translation language"
      type: str
      description: "en-us, ru, pt_BR"
    max_threads:
      default: 10
      label: "Web threads"
      type: int
    weight:
      default: 5
      label: "Http nginx Weight"
      type: int
services:
  activator:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Activator service <br/>
      <strong>Long description</strong>: Responsible for the collecting and processing data from network equipment.<br/>
      <strong>Scale Recommendations</strong>: At least two per core on node. <br/>
      <strong>docs</strong>: To be done<br/>
      <strong>Placement constraint</strong>: On separate node<br/>
    level: pool
  zz_alerta:
    description: >
      <strong>Service type</strong>: Not a service <br/>
      <strong>Short description</strong>: Configuration menu for alerta <br/>
      <strong>Long description</strong>: If configured will be used for notifications about deploys. On Productions install only<br/>
      <strong>Scale Recommendations</strong>: None<br/>
      <strong>docs</strong>: http://docs.alerta.io/en/latest/ <br/>
      <strong>Placement constraint</strong>:  Will not be placed. just to have config for it. <br/>
    level: global
  bi:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Report service <br/>
      <strong>Long description</strong>: Executes Bi requests on Clickhouse db<br/>
      <strong>Scale Recommendations</strong>: At least two per installation.<br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with Clickhouse<br/>
    level: global
    required_assets:
      - bi
  card:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Card service <br/>
      <strong>Long description</strong>: Responsible for an alternative web interface - cards. They are ReadOnly pages showing information on netwrk equipment, segments, and accidents.<br/>
      <strong>Scale Recommendations</strong>: At least two per installation.<br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with nginx<br/>
    level: global
    required_assets:
      - card
      - web
  chwriter:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Clickhouse writer <br/>
      <strong>Long description</strong>: That one is for writing data from nsqd to Clickhouse<br/>
      <strong>Scale Recommendations</strong>: At least two per installation.<br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with Clickhouse<br/>
    level: global
  classifier:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Classifier service <br/>
      <strong>Long description</strong>: Responsible for the classification of the incoming message flow from syslog-collector and snmp-collector according to the rules recorded in the NOC. After classification into the database, go to the Event, i.e. event.<br/>
      <strong>Scale Recommendations</strong>: At least two per pool.<br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with correlator<br/>
    level: pool
  clickhouse:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: ClickHouse database <br/>
      <strong>Long description</strong>: ClickHouse is an open source column-oriented database management system capable of real time generation of analytical data reports using SQL queries.<br/>
      <strong>Scale Recommendations</strong>: See docs<br/>
      <strong>docs</strong>: "https://clickhouse.yandex/docs/en/"<br/>
      <strong>Placement constraint</strong>: High memory node with large enough disk capacity<br/>
    level: global
    port: 8123
  consul:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Consul KV <br/>
      <strong>Long description</strong>: Key/Value and Service discovery service. Have to be installed in quorum with 1,3,5 nodes. One node with instance count 2 will be "bootstrap" node other nodes with 1 instance will be run in server mode. If no node with instance count 2 is set some node will be selected. Other nodes will get agent only service. They will not participate in quorum. For production type installation fast timimgs mode will be enabled.<br/>
      <strong>Scale Recommendations</strong>: See docs<br/>
      <strong>docs</strong>: "https://www.consul.io/intro/index.html"<br/>
      <strong>Placement constraint</strong>: Long living node. <br/>
    level: global
    port: 8500
  correlator:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Correlator <br/>
      <strong>Long description</strong>: Correlate events to alarms. <br/>
      <strong>Scale Recommendations</strong>: Have to be at least one per pool. Can be more than one. Will select active one via consul lock.<br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: pool
  dev:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Various develompent tools <br/>
      <strong>Long description</strong>: ipython, ipython notebook. <br/>
      <strong>Scale Recommendations</strong>: Do not install until you exactly know what for.<br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: global
    required_assets:
      - mib
  discovery:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Discovery service <br/>
      <strong>Long description</strong>: Primary SAE service. Launches tasks on activators, parses results writes to databases. <br/>
      <strong>Scale Recommendations</strong>:  At least two per pool. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: High cpu/memory usage.<br/>
    level: pool
  escalator:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Escalator service <br/>
      <strong>Long description</strong>: Send notifications to external TT systems.<br/>
      <strong>Scale Recommendations</strong>: Have to be at least one per system. Can be more than one. Will select active one via consul lock.<br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: global
  grafana:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: The open platform for beautiful analytics and monitoring <br/>
      <strong>Long description</strong>: Shows graphs based on noc collected data.<br/>
      <strong>Scale Recommendations</strong>: Have to be at least one per system. Stateless. Stores data in postgres. Uses noc internal auth. <br/>
      <strong>docs</strong>: http://docs.grafana.org/<br/>
      <strong>Placement constraint</strong>: On node with nginx<br/>
    level: system
    port: 8002
  grafanads:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Grafanads service <br/>
      <strong>Long description</strong>: Displays annotations on grafanas graphs with alarms info <br/>
      <strong>Scale Recommendations</strong>: Have to be at least one per system. Stateless. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with nginx<br/>
    level: global
  haproxy:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: The Reliable, High Performance TCP/HTTP Load Balancer <br/>
      <strong>Long description</strong>: Used with patroni, keepalived for Postgres HA scheme. Have to be enabled <strong>only</strong> after reading docs.<br/>
      <strong>Scale Recommendations</strong>: At least two separate nodes. <br/>
      <strong>docs</strong>: https://kb.nocproject.org/pages/viewpage.action?pageId=22970899 <br/>
      <strong>Placement constraint</strong>: On node with keepalived <br/>
    level: global
  influxdb:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: TimeSeriesDatabase for internal self mon.<br/>
      <strong>Long description</strong>: Used to store metrics discovered by telegraf<br/>
      <strong>Scale Recommendations</strong>: Optional. <br/>
      <strong>docs</strong>: https://docs.influxdata.com/influxdb/v1.3/<br/>
      <strong>Placement constraint</strong>: High memory node with large enough disk capacity<br/>
    level: system
    port: 8086
  keepalived:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Keealived service <br/>
      <strong>Long description</strong>: Used to serve floating ip for ha-proxy and nginx<br/>
      <strong>Scale Recommendations</strong>: At least two per installation. <br/>
      <strong>docs</strong>: http://www.keepalived.org/documentation.html<br/>
      <strong>Placement constraint</strong>: On node with nginxes and on node with ha-proxies<br/>
    level: global
  login:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>:Login service <br/>
      <strong>Long description</strong>: Internal auth service. Acts as internal api endpoint to auth every web request to NOC web. Can authentificate via LDAP and internal database <br/>
      <strong>Scale Recommendations</strong>: At least two per installation. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with nginx<br/>
    level: global
    scope: test
  mailsender:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Sends emails. <br/>
      <strong>Long description</strong>: Reads mail queue from nsqd and sends via gateway<br/>
      <strong>Scale Recommendations</strong>: At least two per installation. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: global
  memcached:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Memcached daemon <br/>
      <strong>Long description</strong>: Database caching. For both Mongodb and Postgres<br/>
      <strong>Scale Recommendations</strong>: Optional. <br/>
      <strong>docs</strong>: https://github.com/memcached/memcached/wiki <br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: global
    port: 11211
  mongod:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Primary database <br/>
      <strong>Long description</strong>: Used for most of operations<br/>
      <strong>Scale Recommendations</strong>: At least one. Have to be run in replicated mode with 3 or even 5 nodes. <br/>
      <strong>docs</strong>: https://docs.mongodb.com/manual/ <br/>
      <strong>Placement constraint</strong>: Long living nodes. Medium cpu usage. Consumes at least 50%+1Gb of memery on node. Better use separate one.<br/>
    level: system
    port: 27017
  mrt:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: MRT service <br/>
      <strong>Long description</strong>: Launch and supervise tasks from Run commands app<br/>
      <strong>Scale Recommendations</strong>: At least two per installation. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with nginx<br/>
    level: global
  nginx:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Nginx <br/>
      <strong>Long description</strong>: Primary web service.<br/>
      <strong>Scale Recommendations</strong>: At least one per installation. <br/>
      <strong>docs</strong>: http://nginx.org/en/docs/http/ngx_http_upstream_module.html <br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: system
    port: 443
    require_cert: true
    required_assets:
      - web
      - card
      - bi
  noc:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: NOC settings <br/>
      <strong>Long description</strong> :Write settings.yml. file will not be overwritten once created<br/>
      <strong>Scale Recommendations</strong>: At one any node <br/>
      <strong>docs</strong>: <br/>
      <strong>Placement constraint</strong>: Any <br/>
    level: global
  notebook:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Ipython notebook <br/>
      <strong>Long description</strong>: Used mainly by developers for running python console via web interface.<br/>
      <strong>Scale Recommendations</strong>: Optional. Please do not install untul you understands what it for. <br/>
      <strong>docs</strong>: https://ipython.org/notebook.html <br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: global
  nsqadmin:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: NSQ admin interface <br/>
      <strong>Long description</strong>: Used to view and manage nsqd queue. Can be reached on http://node_ip:4171 <br/>
      <strong>Scale Recommendations</strong>: Optional. <br/>
      <strong>docs</strong>: http://nsq.io/components/nsqadmin.html <br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: system
    port: 4171
  nsqd:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: NSQd daemon <br/>
      <strong>Long description</strong>: nsqd is the daemon that receives, queues, and delivers messages to clients. <br/>
      <strong>Scale Recommendations</strong>: Have to be on each node. <br/>
      <strong>docs</strong>: http://nsq.io/components/nsqd.html <br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: system
    port: 4151
  nsqlookupd:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Nsqlookupd daemon <br/>
      <strong>Long description</strong>: Clients query nsqlookupd to discover nsqd producers for a specific topic and nsqd nodes broadcasts topic and channel information.<br/>
      <strong>Scale Recommendations</strong>: Have to be at least one <br/>
      <strong>docs</strong>: http://nsq.io/components/nsqlookupd.html <br/>
      <strong>Placement constraint</strong>: Long living node. <br/>
    level: system
    port: 4161
  omap:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Omap service <br/>
      <strong>Long description</strong>: Maps ip<->database_id for ping service<br/>
      <strong>Scale Recommendations</strong>: At least two per installation. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: global
  patroni:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: Zalando Patroni <br/>
      <strong>Long description</strong>: Patroni is a template for you to create your own customized, high-availability solution using Python and - for maximum accessibility - a distributed configuration store like ZooKeeper, etcd or Consul. <br/>
      <strong>Scale Recommendations</strong>: At least two separate nodes. <br/>
      <strong>docs</strong>: https://kb.nocproject.org/pages/viewpage.action?pageId=22970899 <br/>
      <strong>Placement constraint</strong>: On node with postgres <br/>
    level: global
    port: 8008
  pgbouncer:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: PGbouncer <br/>
      <strong>Long description</strong>: Used for pool connections to postgres. Optional, but hihgly recommended. <br/>
      <strong>Scale Recommendations</strong>: Can be placed on one node with postgres or on each node. <br/>
      <strong>docs</strong>: https://pgbouncer.github.io/config.html <br/>
      <strong>Placement constraint</strong>: On node with postgres <br/>
    level: system
    port: 6432
  ping:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Ping service <br/>
      <strong>Long description</strong>: Pings network equipment with icmp. Creates events on state changes<br/>
      <strong>Scale Recommendations</strong>: At least one per pool.  <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with activator<br/>
    level: pool
  pmwriter:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Pmwriter service <br/>
      <strong>Long description</strong>:  Reads nsqd queue and writes data to InfluxDB. <br/>
      <strong>Scale Recommendations</strong>: At least two per system. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with InfluxDB<br/>
    level: global
  postgres:
    description: >
      <strong>Service type</strong>: External <br/>
      <strong>Short description</strong>: PostgresSQL database <br/>
      <strong>Long description</strong>: Secondary DB. Used to store network equipment info, IPAM and others. <br/>
      <strong>Scale Recommendations</strong>: At least one per system. <br/>
      <strong>docs</strong>: https://www.postgresql.org/docs/9.6/static/index.html<br/>
      <strong>Placement constraint</strong>: Low cpu usage, low memory usage. low io usage. Nothing works without it.<br/>
    level: system
    port: 5432
  sae:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Service activation engine <br/>
      <strong>Long description</strong>:  Acts as proxy between discovery and databases. <br/>
      <strong>Scale Recommendations</strong>: At least two per system. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with discovery<br/>
    level: global
  scheduler:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Scheduler service<br/>
      <strong>Long description</strong>: Launches internal tasks. <br/>
      <strong>Scale Recommendations</strong>: At least one per system. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with discovery<br/>
    level: global
  syslogcollector:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Syslog listener service<br/>
      <strong>Long description</strong>: Listen for syslog events from network equipment adds them to nsqd queue<br/>
      <strong>Scale Recommendations</strong>: One per pool. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with activator<br/>
    level: pool
  tgsender:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Telegram sender<br/>
      <strong>Long description</strong>: Sends alarms and messages to Telegram messandger.<br/>
      <strong>Scale Recommendations</strong>: One per system. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: No special recommendations.<br/>
    level: global
  trapcollector:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: SNMP Trap listener service<br/>
      <strong>Long description</strong>: Listen for SNMP Traps from network equipment adds them to nsqd queue<br/>
      <strong>Scale Recommendations</strong>: One per pool. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with activator<br/>
    level: pool
  web:
    description: >
      <strong>Service type</strong>: Internal <br/>
      <strong>Short description</strong>: Web interface daemon<br/>
      <strong>Long description</strong>: Nginx upstream to show web interface<br/>
      <strong>Scale Recommendations</strong>: At least two per system. <br/>
      <strong>docs</strong>: "To be done"<br/>
      <strong>Placement constraint</strong>: On node with activator<br/>
    level: global
    required_assets:
      - web
      - mib