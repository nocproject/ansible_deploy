Index: noc/lib/python/site-packages/mongoengine/base/metaclasses.py
===================================================================
--- noc.orig/lib/python/site-packages/mongoengine/base/metaclasses.py
+++ noc/lib/python/site-packages/mongoengine/base/metaclasses.py
@@ -11,6 +11,7 @@ from mongoengine.queryset import (DO_NOT
 
 from mongoengine.base.common import _document_registry, ALLOW_INHERITANCE
 from mongoengine.base.fields import BaseField, ComplexBaseField, ObjectIdField
+from mongoengine import signals
 
 __all__ = ('DocumentMetaclass', 'TopLevelDocumentMetaclass')
 
@@ -196,6 +197,7 @@ class DocumentMetaclass(type):
                        "field name" % field.name)
                 raise InvalidDocumentError(msg)
 
+        signals.class_prepared.send(new_class)
         return new_class
 
     def add_to_class(self, name, value):
Index: noc/lib/python/site-packages/mongoengine/signals.py
===================================================================
--- noc.orig/lib/python/site-packages/mongoengine/signals.py
+++ noc/lib/python/site-packages/mongoengine/signals.py
@@ -36,6 +36,7 @@ except ImportError:
 # not put signals in here.  Create your own namespace instead.
 _signals = Namespace()
 
+class_prepared = _signals.signal('class_prepared')
 pre_init = _signals.signal('pre_init')
 post_init = _signals.signal('post_init')
 pre_save = _signals.signal('pre_save')
